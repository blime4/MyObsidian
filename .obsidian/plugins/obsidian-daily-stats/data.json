{
  "dayCounts": {
    "2021/11/10": 3878,
    "2021/11/11": 3165,
    "2021/11/12": 762,
    "2021/11/13": 4303
  },
  "todaysWordCount": {
    "e - 项目/a - muduo/a - linux多线程服务器编程/019 - 进程间通信只用TCP.md": {
      "initial": 89,
      "current": 320
    },
    "e - 项目/a - muduo/a - linux多线程服务器编程/pipe.md": {
      "initial": 34,
      "current": 34
    },
    "e - 项目/a - muduo/a - linux多线程服务器编程/020 - 多线程服务器的适用场合.md": {
      "initial": 0,
      "current": 259
    },
    "e - 项目/a - muduo/a - linux多线程服务器编程/021 - 必须用单线程的场合.md": {
      "initial": 0,
      "current": 612
    },
    "e - 项目/a - muduo/a - linux多线程服务器编程/022 - 单线程程序的优缺点.md": {
      "initial": 10,
      "current": 225
    },
    "e - 项目/a - muduo/a - linux多线程服务器编程/023 - 多线程程序有优势吗.md": {
      "initial": 74,
      "current": 183
    },
    "e - 项目/a - muduo/a - linux多线程服务器编程/024 - 适用多线程程序的场景.md": {
      "initial": 448,
      "current": 448
    },
    "e - 项目/a - muduo/a - linux多线程服务器编程/IO multiplexing.md": {
      "initial": 0,
      "current": 3
    },
    "e - 项目/a - muduo/a - linux多线程服务器编程/025 - 线程的分类.md": {
      "initial": 0,
      "current": 136
    },
    "e - 项目/a - muduo/a - linux多线程服务器编程/026 -.md": {
      "initial": 187,
      "current": 187
    },
    "e - 项目/a - muduo/a - linux多线程服务器编程/026 - Linux能同时启动多少个线程.md": {
      "initial": 119,
      "current": 119
    },
    "e - 项目/a - muduo/a - linux多线程服务器编程/027 - 多线程能提高并发度吗？如果指的是“并发连接数”，则不能。由问题1可知，假如单纯采用thread per connection的模型，那么并发连接数最多300，这远远低于基于事件的单线程程序所能轻松达到的并发连接数（几千乃至上万，甚至几万）。所谓“基于事件”，指的是用IO multiplexing event loop的编程模型，又称Reactor模式.md": {
      "initial": 112,
      "current": 112
    },
    "e - 项目/a - muduo/a - linux多线程服务器编程/027 - 多线程能提高并发度吗？.md": {
      "initial": 106,
      "current": 210
    },
    "e - 项目/a - muduo/a - linux多线程服务器编程/028 - 多线程能提高吞吐量吗？.md": {
      "initial": 285,
      "current": 431
    },
    "e - 项目/a - muduo/a - linux多线程服务器编程/029 - 多线程能降低相应时间吗？.md": {
      "initial": 31,
      "current": 31
    },
    "e - 项目/a - muduo/a - linux多线程服务器编程/blockingqueue.md": {
      "initial": 0,
      "current": 16
    },
    "e - 项目/a - muduo/a - linux多线程服务器编程/030 - 多线程程序如何让IO和“计算”相互重叠，降低latency？.md": {
      "initial": 19,
      "current": 373
    },
    "e - 项目/a - muduo/a - linux多线程服务器编程/031 - 线程池大小的阻抗匹配原则.md": {
      "initial": 0,
      "current": 391
    },
    "e - 项目/a - muduo/a - linux多线程服务器编程/031 - 别的non-trivial多线程编程模型.md": {
      "initial": 0,
      "current": 22
    },
    "thread poll.md": {
      "initial": 0,
      "current": 1
    },
    "e - 项目/a - muduo/threadpool.md": {
      "initial": 54,
      "current": 63
    },
    "e - 项目/a - muduo/a - linux多线程服务器编程/032 - 别的non-trivial多线程编程模型.md": {
      "initial": 22,
      "current": 721
    },
    "e - 项目/a - muduo/a - linux多线程服务器编程/解析域名.md": {
      "initial": 0,
      "current": 1
    },
    "e - 项目/a - muduo/a - linux多线程服务器编程/033 - C++多线程系统编程精要.md": {
      "initial": 0,
      "current": 659
    },
    "e - 项目/a - muduo/a - linux多线程服务器编程/preempt.md": {
      "initial": 0,
      "current": 2
    },
    "e - 项目/a - muduo/a - linux多线程服务器编程/034 - 基本线程原语的选用.md": {
      "initial": 483,
      "current": 483
    },
    "pthread_rwlock.md": {
      "initial": 22,
      "current": 115
    },
    "e - 项目/a - muduo/a - linux多线程服务器编程/035 - c++系统库的线程安全性.md": {
      "initial": 101,
      "current": 301
    },
    "e - 项目/a - muduo/a - linux多线程服务器编程/只有单线程程序能fork.md": {
      "initial": 159,
      "current": 151
    },
    "e - 项目/a - muduo/a - linux多线程服务器编程/036 - 双缓冲技术.md": {
      "initial": 214,
      "current": 254
    },
    "e - 项目/a - muduo/a - linux多线程服务器编程/AsyncLogging.md": {
      "initial": 0,
      "current": 1
    }
  }
}